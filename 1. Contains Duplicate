Problem statement
Contains Duplicate
Solved 
Given an integer array nums, return true if any value appears more than once in the array, otherwise return false.

Example 1:

Input: nums = [1, 2, 3, 3]

Output: true

Example 2:

Input: nums = [1, 2, 3, 4]

Output: false
Solution -->
1) Brute force way
Intuition
The brute-force method to check for duplicates works by comparing each element in the array with every other element that comes after it. 
This is done using two nested loops: the outer loop selects an element, and the inner loop checks it against the remaining elements. 
If a match is found, the function immediately returns `true`. 
This approach ensures all possible pairs are checked but is inefficient for large arrays due to its \(O(n^2)\) time complexity.
It’s straightforward but not optimal for performance.
code
class Solution {
    public boolean hasDuplicate(int[] nums) {
        for(int i = 0 ; i < nums.length ; i++)
        {
            for(int j = i+1; j < nums.length; j++)
            {
                if(nums[i] == nums[j])
                {
                    return true;
                }
            }
        }    
        return false;
    }
}

2) Using Sorting

class Solution {
    public boolean hasDuplicate(int[] nums) {
        Arrays.sort(nums);
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == nums[i - 1]) {
                return true;
            }
        }
        return false;
    }
}
Time Complexity: (𝑛log𝑛)
O(nlogn) due to sorting.
Space Complexity: (1)
O(1) (if sorting is in-place).
Advantage: Doesn't require extra space but is slower for larger arrays.

3) Using Hash Set 
import java.util.Arrays;

class Solution {
    public boolean hasDuplicate(int[] nums) {
        Arrays.sort(nums);
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == nums[i - 1]) {
                return true;
            }
        }
        return false;
    }
}
Time Complexity: 
𝑂(𝑛)
Space Complexity: 
𝑂(𝑛)
Advantage: Less overhead, simpler code.


